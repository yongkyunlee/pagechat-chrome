{"version":3,"sources":["./src/app/components/chat/chat.component.html","./src/app/components/chat/chat.component.ts","./src/environments/environment.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/services/firebase.service.ts","./src/app/app.module.ts","./src/app/constants.ts","./src/app/services/auth.service.ts","./src/app/services/chat.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["<div class=\"chat-window\">\r\n    <div class=\"app-messages\" id=\"app-messages\">\r\n        <div *ngFor=\"let chat of _chatService.chats\" class='chat-div'\r\n             [ngClass]=\"{ 'text-right': _chatService.user.uid === chat.from_uid }\">\r\n            <div class=\"username-div\" *ngIf='_chatService.user.uid !== chat.from_uid'\r\n                    [ngClass]=\"{\r\n                        'my-username-span': _chatService.user.uid === chat.from_uid,\r\n                        'your-username-span': _chatService.user.uid !== chat.from_uid\r\n                    }\">\r\n                {{ chat.name }}\r\n            </div>\r\n            <div class='message-div'>\r\n                <div class='message-span'\r\n                    [ngClass]=\"{\r\n                        'text-right-span': _chatService.user.uid === chat.from_uid,\r\n                        'text-left-span': _chatService.user.uid !== chat.from_uid\r\n                    }\">\r\n                    {{ chat.message }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class='message-input-div'>\r\n        <input\r\n            class=\"message-input\"\r\n            type=\"text\"\r\n            name=\"message\"\r\n            [(ngModel)]=\"message\"\r\n            (keyup.enter)=\"sendMessage()\"\r\n            placeholder=\"what's on your mind?\"\r\n        />\r\n        <button (click)=\"sendMessage()\" class='send-button'>\r\n            <strong>Send</strong>\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { ChatService } from \"src/app/services/chat.service\";\r\n\r\n@Component({\r\n    selector: \"app-chat\",\r\n    templateUrl: \"./chat.component.html\",\r\n    styleUrls: ['./chat.component.scss']\r\n})\r\nexport class ChatComponent implements OnInit {\r\n    message: string = \"\";\r\n    element: any;\r\n\r\n    constructor(public _chatService: ChatService) {\r\n        this._chatService.loadMessage().subscribe(() => {\r\n            setTimeout(() => {\r\n                this.element.scrollTop = this.element.scrollHeight;\r\n            }, 20);\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.element = document.getElementById(\"app-messages\");\r\n    }\r\n\r\n    sendMessage() {\r\n        if (this.message.length === 0) {\r\n            return;\r\n        }\r\n        this._chatService\r\n            .addMessage(this.message)\r\n            .then(() => (this.message = \"\"))\r\n            .catch(error => console.log(\"error\", error));\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n    production: false,\r\n    firebase: {\r\n        apiKey: \"AIzaSyC6KqtZ1MGPxcHFrVYmqlIANU589g9x2xw\",\r\n        authDomain: \"chrome-extension-noninertial.firebaseapp.com\",\r\n        databaseURL: \"https://chrome-extension-noninertial-default-rtdb.firebaseio.com\",\r\n        projectId: \"chrome-extension-noninertial\",\r\n        storageBucket: \"chrome-extension-noninertial.appspot.com\",\r\n        messagingSenderId: \"908579202364\",\r\n        appId: \"1:908579202364:web:446c01b1e3e347d0562a39\",\r\n        measurementId: \"G-48RJPR3D4L\"\r\n    }\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","<div class='container'>\r\n    <div class='title-div'>\r\n        <strong>PageChat</strong>\r\n    </div>\r\n    <!-- <div class='header-div'>\r\n        <div><i>Currently reading</i><span class='page-title-span'>{{ title }}</span></div>\r\n        <div>\r\n            <span class='hostname-span'>{{ urlObject.hostname }}</span>\r\n        </div>\r\n            \r\n            \r\n        <p>{{urlObject.hostname}}</p>\r\n        <div>\r\n            {{ (authService.afAuth.user | async)?.uid}}\r\n        </div>\r\n        <span>🟢</span> <span>{{ title }}</span>\r\n    </div> -->\r\n    <div *ngIf=\"authLoaded\">\r\n        <div *ngIf=\"(authService.afAuth.user | async) === null\" class='auth-div'>\r\n            <div class='auth-input-div'>\r\n                <div class='auth-label-div'>Email</div>\r\n                <input [(ngModel)]=\"email\" type=\"email\" class='auth-input'>\r\n            </div>\r\n            <div class='auth-input-div'>\r\n                <div class='auth-label-div'>Passowrd</div>\r\n                <input [(ngModel)]=\"password\" type=\"password\" class='auth-input'>\r\n            </div>\r\n            <div class='auth-button-div'>\r\n                <button (click)=\"signInWithEmail()\" class='auth-button'>\r\n                    <strong>Sign In</strong>\r\n                </button>\r\n                <button (click)=\"signUpWithEmail()\" class='auth-button'>\r\n                    <strong>Sign Up</strong>\r\n                </button>\r\n            </div>\r\n            <div class='google-auth-div'>\r\n                <button (click)='authService.signInWithGoogle()' class='google-auth-button'>\r\n                    <strong>Sign in with Google</strong>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        \r\n        <!-- 1 of 2 views: if not chatting, can see list of people -->\r\n        <div *ngIf='!chatService.inchat'>\r\n            <div *ngIf=\"authService.afAuth.user | async\">\r\n                <!-- <div>\r\n                    <p>Friends List</p>\r\n                    <div *ngFor='let friend of friends'>\r\n                        {{ friend.uid }}\r\n                    </div>\r\n                </div> -->\r\n                <div class='online-friends-div'>\r\n                    <div class='online-friends-header-div'>Friends Online</div>\r\n                    <div *ngFor='let user of onlineUsers'>\r\n                        <div *ngIf='user.isFriend' class='friend-div'>\r\n                            <div class='friend-header-div'>\r\n                                <div>\r\n                                    <span class='green-circle-span'>🟢</span>\r\n                                    <span class='friend-email-span'>\r\n                                        {{ user.email ? user.email : user.uid }}\r\n                                        <b style='color:red' *ngIf='user.isUnread'>*</b>\r\n                                    </span>\r\n                                </div>\r\n                                <button class='chat-button' (click)='updateRoom(user.uid)'>\r\n                                    <strong>CHAT</strong>\r\n                                </button>\r\n                            </div>\r\n                            <div class='friend-current-title-div'>\r\n                                <a target=\"_blank\" [href]='user.currentUrl' class='friend-current-title-a'>\r\n                                    {{ user.currentTitle }}\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class='online-users-div'>\r\n                    <div class='online-users-header-div'>People on the Same Page</div>\r\n                    <div *ngFor='let user of samePageAnons'>\r\n                        <div *ngIf='!user.isFriend' class='user-div'>\r\n                            <div class='user-header-div'>\r\n                                <div>\r\n                                    <span class='green-circle-span'>🟢</span>\r\n                                    <span class='user-email-span'>\r\n                                        Anonymous User<b style='color:red' *ngIf='user.isUnread'>*</b>\r\n                                    </span>\r\n                                </div>\r\n                                \r\n                                <button class='chat-button' (click)='updateRoom(user.uid)'>\r\n                                    <strong>CHAT</strong>\r\n                                </button>\r\n                            </div>\r\n        \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class='add-friend-div'>\r\n                    <input [(ngModel)]=\"friendUid\" type=\"text\" class='add-friend-input'>\r\n                    <button (click)=\"addFriend()\" class='add-friend-button'>\r\n                        <strong>Add Friend</strong>\r\n                    </button>\r\n                </div>\r\n\r\n                <div class='button-group-div'>\r\n                    <!-- basically switches between the views -->\r\n                    <button (click)='openChat()' class='aux-button'>\r\n                        Open Last Chat\r\n                    </button>\r\n                    <button class='aux-button'>\r\n                        Settings\r\n                    </button>\r\n                </div>\r\n                \r\n                <div class='sign-out-div' *ngIf='authService.afAuth.user | async'>\r\n                    <span (click)='authService.signOut()' class='sign-out-span'>Sign Out</span>\r\n                </div>                \r\n            </div>\r\n        </div>\r\n\r\n        <!-- 2 of 2 views: chatting -->\r\n        <div *ngIf='chatService.inchat'>\r\n            <div *ngIf='(authService.afAuth.user | async)'>\r\n                <app-chat></app-chat>\r\n\r\n                <!-- basically switches between the views -->\r\n                <div class='chat-button-group-div'>\r\n                    <button (click)='closeChat()' class='aux-button'>\r\n                        Close Chat\r\n                    </button>\r\n                    \r\n                    <button (click)='authService.signOut()' class='aux-button'>\r\n                        Sign Out\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- <router-outlet></router-outlet> -->","import { Component, OnInit, NgZone } from '@angular/core';\r\n\r\nimport { AuthService } from './services/auth.service';\r\nimport { FirebaseService } from './services/firebase.service';\r\nimport { ChatService } from \"src/app/services/chat.service\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\n\r\nexport class AppComponent implements OnInit {\r\n    public url: string = '';\r\n    public title: string = '';\r\n    public urlObject: URL;\r\n    public authLoaded = false;\r\n    private uid: string;\r\n    public friendUid = '';\r\n    public email = '';\r\n    public password = '';\r\n    public friends = [];\r\n    public onlineUsers = [];\r\n    public samePageAnons = [];\r\n    message: string = \"\";\r\n    element: any;\r\n    // holds a list of people who've sent unread messages\r\n    // duplicates allowed\r\n    public unreads = [];\r\n\r\n    constructor (\r\n        private zone: NgZone,\r\n        public authService: AuthService,\r\n        public firebaseService: FirebaseService,\r\n        public chatService: ChatService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        chrome.tabs.query({active: true, currentWindow: true}, tabs => {\r\n            this.zone.run(() => {\r\n                this.url = tabs[0].url;\r\n                this.title = tabs[0].title;\r\n                this.urlObject = new URL(this.url);\r\n            });\r\n\r\n            this.authService.afAuth.user.subscribe(data => {\r\n                this.authLoaded = true;\r\n                this.uid = data.uid;\r\n                this.firebaseService.getFriends(data.uid).subscribe(data => {\r\n                    this.friends = data;\r\n                    // leave this alone for now bc friends needs it\r\n                    this.firebaseService.getOnlineUsers(this.uid, this.friends.map(x => x.uid), this.unreads).subscribe(data => {\r\n                        this.onlineUsers = data.filter(item => !!item);\r\n                    })\r\n                    // get only strangers on same page\r\n                    this.firebaseService.getSamePageAnons(this.uid, this.friends.map(x => x.uid), this.url, this.unreads).subscribe(data => {\r\n                        this.samePageAnons = data.filter(item => !!item);\r\n                    })\r\n                });\r\n\r\n                // for getting unread messages\r\n                this.chatService.getUnreads(this.uid, this.friends.map(x => x.uid)).subscribe(data => {\r\n                    this.unreads = data.map(function(a) {return a.from_uid;});\r\n                    // this.unreads = data.filter(item => !!item);\r\n                    this.chatService.unreads = this.unreads\r\n                })\r\n            });\r\n        }) \r\n    }\r\n\r\n    signInWithEmail() {\r\n        this.authService.signInViaEmail(this.email, this.password);\r\n    }\r\n\r\n    signUpWithEmail() {\r\n        this.authService.signUpViaEmail(this.email, this.password);\r\n    }\r\n\r\n    addFriend() {\r\n        if (this.uid !== null || this.uid !== undefined) {\r\n            this.firebaseService.addFriend(this.uid, this.friendUid);\r\n            this.friendUid = '';\r\n        }\r\n    }        \r\n\r\n    sendMessage() {\r\n        if (this.message.length === 0) {\r\n            return;\r\n        }\r\n        this.chatService\r\n            .addMessage(this.message)\r\n            .then(() => (this.message = \"\"))\r\n            .catch(error => console.log(\"error\", error));\r\n    }\r\n    \r\n\r\n    closeChat() {\r\n        this.chatService.inchat = false;        \r\n    }\r\n\r\n    openChat() {\r\n        this.chatService.inchat = true;\r\n    }\r\n\r\n    updateRoom(uid_in: string) {\r\n        // roomId is friend's uid and this user's uid, appended\r\n        // in alphabetical order. just a temporary way to hash\r\n        this.chatService.friend_uid = uid_in;\r\n        if (uid_in < this.chatService.user.uid) {\r\n            this.chatService.roomId = uid_in + this.chatService.user.uid;\r\n        }\r\n        else {\r\n            this.chatService.roomId = this.chatService.user.uid + uid_in;\r\n        }\r\n        this.chatService.inchat=true;\r\n    }\r\n\r\n    hasSentMsg(uid_in: string) {\r\n        return this.unreads.some((sender) => sender == uid_in);\r\n    }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { ChatService } from \"src/app/services/chat.service\";\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styles: []\r\n})\r\nexport class LoginComponent {\r\n  constructor(public _chatService: ChatService) {}\r\n\r\n  login(provider: string) {\r\n    this._chatService.login(provider);\r\n  }\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-md-12 text-center\">\r\n    <p>\r\n      Ingrese al chat con su cuenta favorita\r\n    </p>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-outline-primary\"\r\n      (click)=\"login('google')\"\r\n    >\r\n      <i class=\"fab fa-google\"></i> Google\r\n    </button>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-outline-info ml-3\"\r\n      (click)=\"login('twitter')\"\r\n    >\r\n      <i class=\"fab fa-twitter\"></i> Twitter\r\n    </button>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-outline-primary ml-3\"\r\n      (click)=\"login('facebook')\"\r\n    >\r\n      <i class=\"fab fa-facebook-f\"></i> Facebook\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n\r\nimport firebase from 'firebase/app';\r\nimport { FRIENDS_COLLECTION, STATUS_COLLECTION } from '../constants';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FirebaseService {\r\n    constructor(\r\n        private afs: AngularFirestore\r\n    ) { }\r\n\r\n    addFriend(myUid, friendUid) {\r\n        this.afs.collection(FRIENDS_COLLECTION).doc(myUid).collection(FRIENDS_COLLECTION)\r\n                .doc(friendUid).set({\r\n                    'timestamp': firebase.firestore.FieldValue.serverTimestamp()\r\n                });\r\n        this.afs.collection(FRIENDS_COLLECTION).doc(friendUid).collection(FRIENDS_COLLECTION)\r\n                .doc(myUid).set({\r\n                    'timestamp': firebase.firestore.FieldValue.serverTimestamp()\r\n                });\r\n    }\r\n\r\n    getFriends(uid) {\r\n        return this.afs.collection(FRIENDS_COLLECTION).doc(uid).collection(FRIENDS_COLLECTION)\r\n                .snapshotChanges()\r\n                .pipe(\r\n                    map(actions => {\r\n                        return actions.map(a => {\r\n                            return {\r\n                                uid: a.payload.doc.id\r\n                            };\r\n                        });\r\n                    })\r\n                )\r\n    }\r\n\r\n    getOnlineUsers(uid: string, friends: String[], unreads: String[]) {\r\n        return this.afs.collection(STATUS_COLLECTION,\r\n                ref => ref.where('state', '==', 'online'))\r\n            .snapshotChanges()\r\n            .pipe(\r\n                map(actions => {\r\n                    return actions.map(a => {\r\n                        const status: any = a.payload.doc.data();\r\n                        if (uid !== a.payload.doc.id) {\r\n                            return {\r\n                                uid: a.payload.doc.id,\r\n                                isFriend: friends.includes(a.payload.doc.id),\r\n                                isUnread: unreads.some((sender) => sender == uid),\r\n                                ...status\r\n                            };\r\n                        }\r\n                    });\r\n                })\r\n            )\r\n    }\r\n\r\n    getSamePageAnons(uid: string, friends: String[], url: string, unreads: String[]) {\r\n        return this.afs.collection(STATUS_COLLECTION,\r\n            ref => ref.where('currentUrl', '==', url))\r\n            // below not working, do friend filtering inside\r\n            // .where(firebase.firestore.FieldPath.documentId(), 'not-in', friends))\r\n        .snapshotChanges()\r\n        .pipe(\r\n            map(actions => {\r\n                return actions.map(a => {\r\n                    const status: any = a.payload.doc.data();\r\n                    if (uid !== a.payload.doc.id) {\r\n                        return {\r\n                            uid: a.payload.doc.id,\r\n                            isFriend: friends.includes(a.payload.doc.id),\r\n                            isUnread: unreads.includes(''+a.payload.doc.id),\r\n                            ...status\r\n                        };\r\n                    }\r\n                });\r\n            })\r\n        )\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AngularFireModule } from '@angular/fire';\r\nimport { AngularFirestoreModule } from \"@angular/fire/firestore\";\r\nimport { AngularFireStorageModule } from \"@angular/fire/storage\";\r\nimport { AngularFireAuthModule } from \"@angular/fire/auth\";\r\n\r\nimport { ChatComponent } from \"./components/chat/chat.component\";\r\nimport { LoginComponent } from \"./components/login/login.component\";\r\n\r\nimport { ChatService } from \"./services/chat.service\";\r\n\r\n\r\n// import { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { FirebaseService } from './services/firebase.service';\r\nimport { AuthService } from './services/auth.service';\r\nimport { environment } from '../environments/environment';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ChatComponent,\r\n    LoginComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    AngularFireModule.initializeApp(environment.firebase),\r\n    AngularFirestoreModule, // imports firebase/firestore, only needed for database features\r\n    AngularFireAuthModule, // imports firebase/auth, only needed for auth features,\r\n    AngularFireStorageModule, // imports firebase/storage only needed for storage features\r\n  ],\r\n  providers: [ FirebaseService, AuthService, ChatService ],\r\n  bootstrap: [ AppComponent ]\r\n})\r\nexport class AppModule { }\r\n","export const HISTORY_COLLECTION = 'history';\r\n\r\nexport const STATUS_COLLECTION = 'status';\r\n\r\nexport const FRIENDS_COLLECTION = 'friends';\r\n\r\nexport const CHATS_COLLECTION = 'chats';","import { Injectable } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\n\r\nimport firebase from 'firebase/app';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    constructor (public afAuth: AngularFireAuth) { }\r\n\r\n    signInViaEmail(email, password) {\r\n        return this.afAuth.signInWithEmailAndPassword(email, password)\r\n            .catch(err => {\r\n                alert(err.code);\r\n            })\r\n    }\r\n\r\n    signUpViaEmail(email, password) {\r\n        return this.afAuth.createUserWithEmailAndPassword(email, password)\r\n            .catch(err => {\r\n                alert(err.code);\r\n            });\r\n    }\r\n\r\n    signInWithGoogle() {\r\n        return this.afAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\r\n    }\r\n\r\n    signOut() {\r\n        return this.afAuth.signOut();\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  AngularFirestore,\r\n  AngularFirestoreCollection\r\n} from \"@angular/fire/firestore\";\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { Message } from \"../interfaces/message.interface\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\nimport firebase from 'firebase/app';\r\n\r\nimport { CHATS_COLLECTION } from '../constants';\r\n\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class ChatService {\r\n    private itemsCollection: AngularFirestoreCollection<Message>;\r\n    public user: any = {};\r\n    public chats: Message[] = [];\r\n    // made from uid, frienduid appended in alpha order\r\n    public roomId: string;\r\n    // if the chat window is (should be) open\r\n    public inchat: boolean;\r\n    // uid of the person currently talking to\r\n    public friend_uid: string;\r\n    public unreads: Message[] = [];\r\n\r\n    constructor(\r\n        private _angularFirestore: AngularFirestore,\r\n        public _angularFireAuth: AngularFireAuth\r\n    ) {\r\n        this._angularFireAuth.authState.subscribe(user => {\r\n            if (!user) {\r\n                this.user = {};\r\n                // if user logged out:        \r\n                // this._router.navigate([\"/\"]);\r\n                return;\r\n            }\r\n            // this._router.navigate([\"/\"]);\r\n            this.user.name = user.displayName;\r\n            this.user.uid = user.uid;\r\n            this.user.photo = user.photoURL;\r\n            // TODO ask db for the \r\n            this.roomId = \"lobby\";\r\n            this.inchat = false;\r\n        });\r\n    }\r\n\r\n  \r\n    // below login/logout not used, left to keep login components alive in case\r\n    login(provider: string) {\r\n    // switch (provider) {\r\n    //   case \"google\":\r\n        this._angularFireAuth.signInWithPopup(\r\n            new firebase.auth.GoogleAuthProvider()\r\n        );\r\n    //     break;\r\n    //   case \"twitter\":\r\n    //     this._angularFireAuth.auth.signInWithPopup(\r\n    //       new firebase.auth.TwitterAuthProvider()\r\n    //     );\r\n    //     break;\r\n    //   default:\r\n    //     this._angularFireAuth.auth.signInWithPopup(\r\n    //       new firebase.auth.FacebookAuthProvider()\r\n    //     );\r\n    //     break;\r\n    // }\r\n    }\r\n\r\n    logout() {\r\n        this._angularFireAuth.signOut();\r\n    }\r\n\r\n    loadMessage() {\r\n        this.itemsCollection = this._angularFirestore.collection<Message>(\r\n            CHATS_COLLECTION,\r\n            ref => ref.where(\"roomId\", \"==\", this.roomId).orderBy(\"date\", \"desc\").limit(Math.max(10+this.unreads.length))\r\n        );\r\n        return this.itemsCollection.valueChanges().pipe(\r\n            map((messages: Message[]) => {\r\n                this.chats = [];\r\n                for (let message of messages) {\r\n                    this.chats.unshift(message);\r\n                    // if the message we're displaying is to current user (not sent from current user)\r\n                    // then want to update the read status\r\n                    if (message.to_uid == this.user.uid) {\r\n                        this._angularFirestore.collection<Message>(CHATS_COLLECTION).doc(message.from_uid + message.date)\r\n                            .update({read: true});\r\n                    }\r\n                }\r\n                return this.chats;\r\n            })\r\n        );\r\n    }\r\n\r\n    addMessage(text: string) {\r\n        let message: Message = {\r\n            name: this.user.name,\r\n            message: text,\r\n            date: firebase.firestore.Timestamp.now().toMillis(),\r\n            from_uid: this.user.uid,\r\n            to_uid: this.friend_uid,\r\n            roomId: this.roomId,\r\n            read: false\r\n        };\r\n        return this.itemsCollection.doc(message.from_uid + message.date).set(message);\r\n    }\r\n\r\n    getUnreads(uid: string, friends: String[]) {\r\n        return this._angularFirestore.collection<Message>(CHATS_COLLECTION,\r\n            ref => ref.where('to_uid', '==', uid).where('read', '==', false))\r\n            .snapshotChanges()\r\n            .pipe(map(actions => {\r\n                return actions.map(a => {\r\n                    const data = a.payload.doc.data();// as Message;\r\n                    const id = a.payload.doc.id;                    \r\n                    return {\r\n                        uid: id,\r\n                        hasUnread : friends.includes(a.payload.doc.id),\r\n                        ...data\r\n                    };\r\n                });\r\n            })\r\n        )\r\n    }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}