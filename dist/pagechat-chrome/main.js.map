{"version":3,"sources":["./src/app/components/chat/chat.component.html","./src/app/components/chat/chat.component.ts","./src/environments/environment.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/services/firebase.service.ts","./src/app/app.module.ts","./src/app/constants.ts","./src/app/services/auth.service.ts","./src/app/services/chat.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["<div class=\"chat-window\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <h1>Chat </h1>\n    </div>\n    <div class=\"col-3\" *ngIf=\"_chatService.user.photo\">\n      <img [src]=\"_chatService.user.photo\" class=\"img-fluid avatar\" />\n    </div>\n  </div>\n  <hr />\n  <div class=\"app-messages\" id=\"app-messages\">\n    <div\n      [ngClass]=\"{ 'text-right': _chatService.user.uid === chat.uid }\"\n      *ngFor=\"let chat of _chatService.chats\"\n    >\n      <span\n        class=\"badge\"\n        [ngClass]=\"{\n          'badge-primary': _chatService.user.uid === chat.uid,\n          'badge-success': _chatService.user.uid !== chat.uid\n        }\"\n        >{{ chat.name }}</span\n      >\n      <p>\n        {{ chat.message }}\n      </p>\n    </div>\n    \n  </div>\n  <hr />\n  <input\n    class=\"form-control\"\n    type=\"text\"\n    name=\"message\"\n    [(ngModel)]=\"message\"\n    (keyup.enter)=\"sendMessage()\"\n    placeholder=\"what's on your mind?\"\n  />\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ChatService } from \"src/app/services/chat.service\";\n\n@Component({\n  selector: \"app-chat\",\n  templateUrl: \"./chat.component.html\",\n  styles: []\n})\nexport class ChatComponent implements OnInit {\n  message: string = \"\";\n  element: any;\n\n  constructor(public _chatService: ChatService) {\n    this._chatService.loadMessage().subscribe(() => {\n      setTimeout(() => {\n        this.element.scrollTop = this.element.scrollHeight;\n      }, 20);\n    });\n  }\n\n  ngOnInit() {\n    this.element = document.getElementById(\"app-messages\");\n  }\n\n  sendMessage() {\n    if (this.message.length === 0) {\n      return;\n    }\n    this._chatService\n      .addMessage(this.message)\n      .then(() => (this.message = \"\"))\n      .catch(error => console.log(\"error\", error));\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n    firebase: {\n        apiKey: \"AIzaSyC6KqtZ1MGPxcHFrVYmqlIANU589g9x2xw\",\n        authDomain: \"chrome-extension-noninertial.firebaseapp.com\",\n        databaseURL: \"https://chrome-extension-noninertial-default-rtdb.firebaseio.com\",\n        projectId: \"chrome-extension-noninertial\",\n        storageBucket: \"chrome-extension-noninertial.appspot.com\",\n        messagingSenderId: \"908579202364\",\n        appId: \"1:908579202364:web:446c01b1e3e347d0562a39\",\n        measurementId: \"G-48RJPR3D4L\"\n    }\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","<div class='container'>\n    <div class='title-div'>\n        <strong>PageChat</strong>\n    </div>\n    <!-- <div class='header-div'>\n        <div><i>Currently reading</i><span class='page-title-span'>{{ title }}</span></div>\n        <div>\n            <span class='hostname-span'>{{ urlObject.hostname }}</span>\n        </div>\n            \n            \n        <p>{{urlObject.hostname}}</p>\n        <div>\n            {{ (authService.afAuth.user | async)?.uid}}\n        </div>\n        <span>🟢</span> <span>{{ title }}</span>\n    </div> -->\n    <div *ngIf=\"authLoaded\">\n        <div *ngIf=\"(authService.afAuth.user | async) === null\" class='auth-div'>\n            <div class='auth-input-div'>\n                <div class='auth-label-div'>Email</div>\n                <input [(ngModel)]=\"email\" type=\"email\" class='auth-input'>\n            </div>\n            <div class='auth-input-div'>\n                <div class='auth-label-div'>Passowrd</div>\n                <input [(ngModel)]=\"password\" type=\"password\" class='auth-input'>\n            </div>\n            <div class='auth-button-div'>\n                <button (click)=\"signInWithEmail()\" class='auth-button'>\n                    <strong>Sign In</strong>\n                </button>\n                <button (click)=\"signUpWithEmail()\" class='auth-button'>\n                    <strong>Sign Up</strong>\n                </button>\n            </div>\n            <div class='google-auth-div'>\n                <button (click)='authService.signInWithGoogle()' class='google-auth-button'>\n                    <strong>Sign in with Google</strong>\n                </button>\n            </div>\n        </div>\n        \n        <!-- 1 of 2 views: if not chatting, can see list of people -->\n        <div *ngIf='!chatService.inchat'>\n            <div *ngIf=\"authService.afAuth.user | async\">\n                <!-- <div>\n                    <p>Friends List</p>\n                    <div *ngFor='let friend of friends'>\n                        {{ friend.uid }}\n                    </div>\n                </div> -->\n                <div class='online-friends-div'>\n                    <div class='online-friends-header-div'>Friends Online</div>\n                    <div *ngFor='let user of onlineUsers'>\n                        <div *ngIf='user.isFriend' class='friend-div'>\n                            <div class='friend-header-div'>\n                                <div>\n                                    <span class='green-circle-span'>🟢</span>\n                                    <span class='friend-email-span'>\n                                        {{ user.email ? user.email : user.uid }}\n                                    </span>\n                                </div>\n                                <button class='chat-button' (click)='updateRoom(user.uid)'>\n                                    <strong>CHAT</strong>\n                                </button>\n                            </div>\n                            <div class='friend-current-title-div'>\n                                <a target=\"_blank\" [href]='user.currentUrl' class='friend-current-title-a'>\n                                    {{ user.currentTitle }}\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class='online-users-div'>\n                    <div class='online-users-header-div'>People on the Same Page</div>\n                    <div *ngFor='let user of onlineUsers'>\n                        <div *ngIf='!user.isFriend' class='user-div'>\n                            <div class='user-header-div'>\n                                <div>\n                                    <span class='green-circle-span'>🟢</span>\n                                    <span class='user-email-span'>\n                                        Anonymous User\n                                    </span>\n                                </div>\n                                \n                                <button class='chat-button' (click)='updateRoom(user.uid)'>\n                                    <strong>CHAT</strong>\n                                </button>\n                            </div>\n        \n                        </div>\n                    </div>\n                </div>\n\n                <div class='add-friend-div'>\n                    <input [(ngModel)]=\"friendUid\" type=\"text\" class='add-friend-input'>\n                    <button (click)=\"addFriend()\" class='add-friend-button'>\n                        <strong>Add Friend</strong>\n                    </button>\n                </div>\n\n                <div class='button-group-div'>\n                    <!-- basically switches between the views -->\n                    <button (click)='openChat()' class='aux-button'>\n                        Open Last Chat\n                    </button>\n                    <button class='aux-button'>\n                        Settings\n                    </button>\n                </div>\n                \n                <div class='sign-out-div' *ngIf='authService.afAuth.user | async'>\n                    <span (click)='authService.signOut()' class='sign-out-span'>Sign Out</span>\n                </div>                \n            </div>\n        </div>\n\n        <!-- 2 of 2 views: chatting -->\n        <div *ngIf='chatService.inchat'>\n            <div *ngIf='(authService.afAuth.user | async)'>\n                <!-- basically switches between the views -->\n                <button (click)='closeChat()'>\n                    Close Chat\n                </button>\n                \n                <button (click)='authService.signOut()'>\n                    Sign Out\n                </button>\n\n                <app-chat></app-chat>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- <router-outlet></router-outlet> -->","import { Component, OnInit, NgZone } from '@angular/core';\n\nimport { AuthService } from './services/auth.service';\nimport { FirebaseService } from './services/firebase.service';\nimport { ChatService } from \"src/app/services/chat.service\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n\nexport class AppComponent implements OnInit {\n    public url: string = '';\n    public title: string = '';\n    public urlObject: URL;\n    public authLoaded = false;\n    private uid: string;\n    public friendUid = '';\n    public email = '';\n    public password = '';\n    public friends = [];\n    public onlineUsers = [];\n    message: string = \"\";\n    element: any;\n    public unreads = [];\n\n    constructor (\n        private zone: NgZone,\n        public authService: AuthService,\n        public firebaseService: FirebaseService,\n        public chatService: ChatService\n    ) { }\n\n    ngOnInit() {\n        chrome.tabs.query({active: true, currentWindow: true}, tabs => {\n            this.zone.run(() => {\n                this.url = tabs[0].url;\n                this.title = tabs[0].title;\n                this.urlObject = new URL(this.url);\n            });\n\n            this.authService.afAuth.user.subscribe(data => {\n                this.authLoaded = true;\n                this.uid = data.uid;\n\n                this.firebaseService.getFriends(data.uid).subscribe(data => {\n                    this.friends = data;\n                    this.firebaseService.getOnlineUsers(this.uid, this.friends.map(x => x.uid)).subscribe(data => {\n                        this.onlineUsers = data.filter(item => !!item);\n                    })\n                });\n            });\n\n            // TODO for getting unread messages\n            // this.chatService.getUnreads().subscribe(data => {\n            //     this.unreads = data;\n            //     console.error('change');\n            //     console.error(data);\n\n            // })\n\n        }) \n    }\n\n    signInWithEmail() {\n        this.authService.signInViaEmail(this.email, this.password);\n    }\n\n    signUpWithEmail() {\n        this.authService.signUpViaEmail(this.email, this.password);\n    }\n\n    addFriend() {\n        if (this.uid !== null || this.uid !== undefined) {\n            this.firebaseService.addFriend(this.uid, this.friendUid);\n            this.friendUid = '';\n        }\n    }        \n\n    sendMessage() {\n        if (this.message.length === 0) {\n            return;\n        }\n        this.chatService\n            .addMessage(this.message)\n            .then(() => (this.message = \"\"))\n            .catch(error => console.log(\"error\", error));\n    }\n    \n\n    closeChat() {\n        this.chatService.inchat = false;        \n    }\n\n    openChat() {\n        this.chatService.inchat = true;\n    }\n\n    updateRoom(uid_in: string) {\n        // roomId is friend's uid and this user's uid, appended\n        // in alphabetical order. just a temporary way to hash\n        this.chatService.friend_uid = uid_in;\n        if (uid_in < this.chatService.user.uid) {\n            this.chatService.roomId = uid_in + this.chatService.user.uid;\n        }\n        else {\n            this.chatService.roomId = this.chatService.user.uid + uid_in;\n        }\n        this.chatService.inchat=true;\n    }\n}\n","import { Component } from \"@angular/core\";\nimport { ChatService } from \"src/app/services/chat.service\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styles: []\n})\nexport class LoginComponent {\n  constructor(public _chatService: ChatService) {}\n\n  login(provider: string) {\n    this._chatService.login(provider);\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12 text-center\">\n    <p>\n      Ingrese al chat con su cuenta favorita\n    </p>\n    <button\n      type=\"button\"\n      class=\"btn btn-outline-primary\"\n      (click)=\"login('google')\"\n    >\n      <i class=\"fab fa-google\"></i> Google\n    </button>\n    <button\n      type=\"button\"\n      class=\"btn btn-outline-info ml-3\"\n      (click)=\"login('twitter')\"\n    >\n      <i class=\"fab fa-twitter\"></i> Twitter\n    </button>\n    <button\n      type=\"button\"\n      class=\"btn btn-outline-primary ml-3\"\n      (click)=\"login('facebook')\"\n    >\n      <i class=\"fab fa-facebook-f\"></i> Facebook\n    </button>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\n\n\nimport firebase from 'firebase/app';\nimport { FRIENDS_COLLECTION, STATUS_COLLECTION } from '../constants';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FirebaseService {\n    constructor(\n        private afs: AngularFirestore\n    ) { }\n\n    addFriend(myUid, friendUid) {\n        this.afs.collection(FRIENDS_COLLECTION).doc(myUid).collection(FRIENDS_COLLECTION)\n                .doc(friendUid).set({\n                    'timestamp': firebase.firestore.FieldValue.serverTimestamp()\n                });\n        this.afs.collection(FRIENDS_COLLECTION).doc(friendUid).collection(FRIENDS_COLLECTION)\n                .doc(myUid).set({\n                    'timestamp': firebase.firestore.FieldValue.serverTimestamp()\n                });\n    }\n\n    getFriends(uid) {\n        return this.afs.collection(FRIENDS_COLLECTION).doc(uid).collection(FRIENDS_COLLECTION)\n                .snapshotChanges()\n                .pipe(\n                    map(actions => {\n                        return actions.map(a => {\n                            return {\n                                uid: a.payload.doc.id\n                            };\n                        });\n                    })\n                )\n    }\n\n    getOnlineUsers(uid: string, friends: String[]) {\n        return this.afs.collection(STATUS_COLLECTION,\n                ref => ref.where('state', '==', 'online'))\n            .snapshotChanges()\n            .pipe(\n                map(actions => {\n                    return actions.map(a => {\n                        const status: any = a.payload.doc.data();\n                        if (uid !== a.payload.doc.id) {\n                            return {\n                                uid: a.payload.doc.id,\n                                isFriend: friends.includes(a.payload.doc.id),\n                                ...status\n                            };\n                        }\n                    });\n                })\n            )\n    }\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFirestoreModule } from \"@angular/fire/firestore\";\nimport { AngularFireStorageModule } from \"@angular/fire/storage\";\nimport { AngularFireAuthModule } from \"@angular/fire/auth\";\n\nimport { ChatComponent } from \"./components/chat/chat.component\";\nimport { LoginComponent } from \"./components/login/login.component\";\n\nimport { ChatService } from \"./services/chat.service\";\n\n\n// import { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FirebaseService } from './services/firebase.service';\nimport { AuthService } from './services/auth.service';\nimport { environment } from '../environments/environment';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ChatComponent,\n    LoginComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AngularFireModule.initializeApp(environment.firebase),\n    AngularFirestoreModule, // imports firebase/firestore, only needed for database features\n    AngularFireAuthModule, // imports firebase/auth, only needed for auth features,\n    AngularFireStorageModule, // imports firebase/storage only needed for storage features\n  ],\n  providers: [ FirebaseService, AuthService, ChatService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n","export const HISTORY_COLLECTION = 'history';\n\nexport const STATUS_COLLECTION = 'status';\n\nexport const FRIENDS_COLLECTION = 'friends';\n\nexport const CHATS_COLLECTION = 'chats';","import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\n\nimport firebase from 'firebase/app';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    constructor (public afAuth: AngularFireAuth) { }\n\n    signInViaEmail(email, password) {\n        return this.afAuth.signInWithEmailAndPassword(email, password)\n            .catch(err => {\n                alert(err.code);\n            })\n    }\n\n    signUpViaEmail(email, password) {\n        return this.afAuth.createUserWithEmailAndPassword(email, password)\n            .catch(err => {\n                alert(err.code);\n            });\n    }\n\n    signInWithGoogle() {\n        return this.afAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n    }\n\n    signOut() {\n        return this.afAuth.signOut();\n    }\n}","import { Injectable } from \"@angular/core\";\nimport {\n  AngularFirestore,\n  AngularFirestoreCollection\n} from \"@angular/fire/firestore\";\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { Message } from \"../interfaces/message.interface\";\nimport { map } from \"rxjs/operators\";\n\nimport firebase from 'firebase/app';\n\nimport { CHATS_COLLECTION } from '../constants';\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ChatService {\n  private itemsCollection: AngularFirestoreCollection<Message>;\n  public user: any = {};\n  public chats: Message[] = [];\n  // made from uid, frienduid appended in alpha order\n  public roomId: string;\n  // if the chat window is (should be) open\n  public inchat: boolean;\n  // uid of the person currently talking to\n  public friend_uid: string;\n\n  constructor(\n    private _angularFirestore: AngularFirestore,\n    public _angularFireAuth: AngularFireAuth\n  ) {\n    this._angularFireAuth.authState.subscribe(user => {\n      if (!user) {\n        this.user = {};\n        // if user logged out:        \n        // this._router.navigate([\"/\"]);\n        return;\n      }\n      // this._router.navigate([\"/\"]);\n      this.user.name = user.displayName;\n      this.user.uid = user.uid;\n      this.user.photo = user.photoURL;\n      // TODO ask db for the \n      this.roomId = \"lobby\";\n      this.inchat = false;\n    });\n  }\n\n  \n  // below login/logout not used, left to keep login components alive in case\n  login(provider: string) {\n    // switch (provider) {\n    //   case \"google\":\n        this._angularFireAuth.signInWithPopup(\n          new firebase.auth.GoogleAuthProvider()\n        );\n    //     break;\n    //   case \"twitter\":\n    //     this._angularFireAuth.auth.signInWithPopup(\n    //       new firebase.auth.TwitterAuthProvider()\n    //     );\n    //     break;\n    //   default:\n    //     this._angularFireAuth.auth.signInWithPopup(\n    //       new firebase.auth.FacebookAuthProvider()\n    //     );\n    //     break;\n    // }\n  }\n\n  logout() {\n    this._angularFireAuth.signOut();\n  }\n\n  loadMessage() {\n    this.itemsCollection = this._angularFirestore.collection<Message>(\n      CHATS_COLLECTION,\n      ref => ref.where(\"roomId\", \"==\", this.roomId).orderBy(\"date\", \"desc\").limit(10)\n    );\n    return this.itemsCollection.valueChanges().pipe(\n      map((messages: Message[]) => {\n        this.chats = [];\n        for (let message of messages) {\n          this.chats.unshift(message);\n        }\n        return this.chats;\n      })\n    );\n  }\n\n  addMessage(text: string) {\n    let message: Message = {\n      name: this.user.name,\n      message: text,\n      date: firebase.firestore.Timestamp.now().toMillis(),\n      from_uid: this.user.uid,\n      to_uid: this.friend_uid,\n      roomId: this.roomId\n    };\n    return this.itemsCollection.add(message);\n  }\n\n  // TODO for getting unread messages\n  // getUnreads() {\n  //   return this._angularFirestore.collection(CHATS_COLLECTION,\n  //       ref => ref.where('to_uid', '==', this.user.uid))\n  //   .snapshotChanges()\n  //   .pipe(\n  //     map(actions => {\n  //         return actions.map(a => {\n  //             const message: any = a.payload.doc.data();\n  //             if (this.user.uid !== a.payload.doc.id) {\n  //                 return {\n  //                     uid: a.payload.doc.id,\n  //                     ...message\n  //                 };\n  //             }\n  //         });\n  //     })\n  //   )\n  // }\n\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}